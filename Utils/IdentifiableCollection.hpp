
///<summary>
/// コンストラクタ
///</summary>
template <typename T>
Collection::IdentifiableCollection<T>::IdentifiableCollection() 
{
	collection = std::make_unique< std::set < std::shared_ptr<T>, std::function<bool(const std::shared_ptr<T>, const std::shared_ptr<T>)>>>([](const std::shared_ptr<T> a, const std::shared_ptr<T> b) {
		return a->get_id() < b->get_id();
	});
}


///<summary>
/// デストラクタ
///</summary>
template <typename T>
Collection::IdentifiableCollection<T>::~IdentifiableCollection()
{
}


///<summary>
/// 指定したIDを持つ要素を読出し専用で取得する．
/// 見つからない場合はnullptrを返す．
/// ソート済みのコレクションに対しては2分探索
/// ソートされていないコレクションに対しては前から全探索する．
///</summary>
template <typename T>
std::shared_ptr<T const> Collection::IdentifiableCollection<T>::read_by_id(const unsigned long &id) const
{
	auto target_iter = collection->find(std::make_shared<T>(id));
	if (target_iter == collection->end()) {
		return nullptr;
	}
	return *target_iter;
}

///<summary>
/// 指定したIDを持つ要素を変更可能な状態で取得する．
/// 見つからない場合はnullptrを返す．
/// ソート済みのコレクションに対しては2分探索
/// ソートされていないコレクションに対しては前から全探索する．
///</summary>
template <typename T>
std::shared_ptr<T> Collection::IdentifiableCollection<T>::get_by_id(const unsigned long &id)
{
	auto target_iter = collection->find(std::make_shared<T>(id));
	if (target_iter == collection->end() || target_iter->get()->get_id() != id) {
		return nullptr;
	}
	return *target_iter;
}


///<summary>
/// 指定したIDを持つ要素を探索し，削除する．
/// 要素が存在し，削除できた場合はtrueを，それ以外の場合はfalseを返す．
///</summary>
template <typename T>
bool Collection::IdentifiableCollection<T>::remove_by_id(const unsigned long &id)
{
	auto target_iter = collection->find(std::make_shared<T>(id));

	// 要素が見つからない場合はfalseを返して終了
	if (target_iter->get()->get_id() != id) {
		return false;
	}

	//要素が見つかった場合は削除してtureを返す
	collection->erase(target_iter);
	return true;
}

///<summary>
/// 指定したIDを持つ要素を含んでいるかを判定する
///</summary>
template <typename T>
bool Collection::IdentifiableCollection<T>::contains(unsigned long id) const
{
	bool is_contained = read_by_id(id) != nullptr;
	return is_contained;
}

///<summary>
/// 指定したIDを持つ要素を含んでいるかを判定する
///</summary>
template <typename T>
bool Collection::IdentifiableCollection<T>::contains(Identifiable id) const
{
	return contains(id.get_id());
}


///<summary>
/// コレクションの末尾に指定した要素を格納する
/// IDが重複する場合はDuplicatedIdExceptionをスローする．
///</summary>
template <typename T>
bool Collection::IdentifiableCollection<T>::add(std::shared_ptr<T> val)
{

	//既存IDの場合は追加しない
	unsigned long id = val->get_id();
	if (contains(id)) {
		throw DuplicatedIdException(id);
		return false;
	}

	collection->insert(val);
	return true;
}

///<summary>
/// コレクションの末尾に指定した要素を格納する
/// IDが重複する場合はDuplicatedIdExceptionをスローする．
///</summary>
template <typename T>
bool Collection::IdentifiableCollection<T>::add(T val)
{
	return add(std::make_shared<T>(val));
}

///<summary>
/// コレクション中の要素を全て削除
///</summary>
template <typename T>
void Collection::IdentifiableCollection<T>::clear()
{
	collection->clear();
}


///<summary>
/// コレクション内の要素数を取得する
///</summary>
template <typename T>
std::size_t Collection::IdentifiableCollection<T>::size() const
{
	return collection->size();
}
